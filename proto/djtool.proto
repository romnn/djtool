syntax = "proto3";
package proto.djtool;

service DjTool {
  // sync request
  rpc Sync(SyncRequest) returns (stream SyncProgressUpdate) {}
  // load library
  /* rpc Disconnect(DisconnectRequest) returns (Empty) {} */
}

enum Service {
  SPOTIFY = 0;
  SOUNDCLOUD = 1;
  YOUTUBE = 2;
}

/* enum Source { */
/*   SPOTIFY = 0; */
/*   SOUNDCLOUD = 1; */
/*   YOUTUBE = 2; */
/* } */

/* enum Sink { */
/*   YOUTUBE = 0; */
/*   SOUNDCLOUD = 1; */
/* } */

message UserId {
  string id = 1;
  Service source = 10;
}

message TrackId {
  string id = 1;
  PlaylistId playlist_id = 2;
  Service source = 10;
}

message PlaylistId {
  string id = 1;
  Service source = 10;
}

message PlaylistSyncRequest {
// test
}

/* message SyncRequest { */
/* PlaylistSyncRequest playlist = 1; */
/* } */


/* message UserId { */
/*   oneof id { */
/*     SpotifyUserId spotify_user_id = 1; */
/*   } */
/* } */
message SpotifyUserLoginCallbackPkce {
  string code = 1;
  string state = 2;
}

message SpotifyUserLoginCallback {
  oneof method {
    SpotifyUserLoginCallbackPkce pkce = 1;
  }
}

message UserLoginCallback {
  oneof login {
    SpotifyUserLoginCallback spotify_login = 1;
  }
}

/* message UserId { */
/*   oneof id { */
/*     SpotifyUserId spotify_user_id = 1; */
/*   } */
/* } */

/* message DownloadedTrack { */
/*   Track track = 1; */
/*   string file_path = 2; */
/*   /1* uint64 content_length = 3; *1/ */
/* } */

message Artwork {
  string url = 1;
  uint32 width = 2;
  uint32 height = 3;
}

message TrackPreview {
  string url = 1;
}

message Track {
  /* Source source = 1; */
  /* PlaylistId playlist_id = 1; */
  TrackId track_id = 1;
  string name = 100;
  string artist = 101;
  Artwork artwork = 200;
  TrackPreview preview = 201;
}

message Playlist {
  PlaylistId id = 1;
  string name = 2;
  repeated Track tracks = 100;
}

/* message SourcePlaylists { */
/*   Source source = 1; */
/*   repeated Playlist playlists = 100; */
/* } */

/* message Playlists { repeated Playlist playlists = 1; } */

/* message Library { */
/*   repeated SourcePlaylists sources = 1; */
/*   /1* map<string, Playlists> sources = 1; *1/ */
/* } */

message TrackSyncDesc {
  string id = 1;
  string source = 2;
  string sink = 3;
}

message PlaylistSyncDesc {
  string id = 1;
  string source = 2;
  string sink = 3;
}

message SyncProgressUpdate {
  // todo oneof
}

message SyncRequest {
  repeated string sources = 1;
  repeated TrackSyncDesc tracks = 2;
  repeated PlaylistSyncDesc playlists = 3;
  /* oneof request { */
  /*   TrackDescriptor track = 1; */
  /*   PlaylistDescriptor playlist = 2; */
  /*   // all is equal to none here */
  /*   /1* SyncAll all = 3; *1/ */
  /* } */
}

/* message Empty {} */

/* message ConnectRequest {} */

/* message DisconnectRequest {} */

/* message Heartbeat { uint64 seq = 1; } */

/* message Update { */
/*   oneof update { */
/*     // todo: add status messages or notifications */
/*     Heartbeat heartbeat = 1; */
/*     /1* Assignment assignment = 2; *1/ */
/*   } */
/* } */
